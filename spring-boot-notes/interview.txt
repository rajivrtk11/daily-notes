//        String paranthesis = "()()[]{}"; ()(
//        String paranthesis = "()[{}";
        String paranthesis = "()(";

        Stack<Character> st = new Stack<>();

        //
        boolean isValid = true;
        for(int i = 0; i < paranthesis.length() && isValid; i++) {
            char ch = paranthesis.charAt(i);

            if(ch == '(' || ch == '{' || ch == '[') {
                st.push(ch);
            }
            else if(ch == ')' && st.peek() == '(') {
                st.pop();
            }
            else if(ch == '}' && st.peek() == '{') {
                st.pop();
            }
            else if(ch == ']' && st.peek() == '[') {
                st.pop();
            }
            else {
                isValid = false;
            }
        }

        isValid = st.size() > 0 ? false: isValid;

        System.out.println("Is Paranthesis valid "+ isValid);


        public static void main(String[] args) {
        /*
        Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]]
        such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.
        Notice that the solution set must not contain duplicate triplets.

        Example 1:
        Input: nums = [-1,0,1,2,-1,-4]

        Output: [[-1,-1,2],[-1,0,1]]

        m-1
            Hashset
            p1 -> 0
            Hashset
            p2 -> p1+1
            Hashset
            p3 -> p2+1

            t: 0(n^3)

       m-2
       nums = [-1,0,1,2,-1,-4]
       sort = [-4, -1, -1, 0, 1, 2]
       p1 -> 0
       p2 -> p1+1;
       p3 -> n-1;

       tar = 0
       sum = -4 + (-1) + 2 = -3 < tar
       t: 0(n^2)
        */

        int[] nums = {-1,0,1,2,-1,-4};
        int tar = 0;
        Arrays.sort(nums);

        List<List<Integer>> ansList = new ArrayList<>();

        int n = nums.length;
        int p1 = 0;

        // 1, 2, 3, 4
        while (p1 < n) {
            int p2 = p1 + 1, p3 = n-1;
            while(p2 < p3) {
                int sum = nums[p1] + nums[p2] + nums[p3];
                if(sum == tar) {
                    ansList.add(Arrays.asList(nums[p1], nums[p2], nums[p3]));
                    p2++;
                    p3--;
                }
                else if(sum < tar) p2++;
                else p3--;
            }

            if(p1+1 < n && nums[p1] == nums[p1+1]) {
                while(p1+1 < n && nums[p1] == nums[p1+1] )p1++;
            }
            else p1++;

        }

        System.out.println("Triplets are "+ ansList);
    }

    PriorityQueue<Integer> pq = new PriorityQueue<>();
        List<Integer> ans = new ArrayList<>();
        int[] nums = {1,3,-1,-3,5,3,6,7};
        int k = 3, n = nums.length;

        for(int i = 0; i < k; i++) {
            pq.add(i);
        }
        // i = 3 - 3
        for(int i = k; i < n; i++) {
            int max = pq.remove(); // logk 
            ans.add(nums[max]); 

            if(max < i - k)
                pq.remove(max); // logk
        }
        // 0(n*(2logk) => nlogk
        System.out.println("Max sliding window "+ ans);

